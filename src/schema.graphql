enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type Query {
    users(query: String): [User!]!
    posts(query: String): [Post!]!
    comments: [Comment!]!
    me: User!
    post: Post!
}

type Mutation {
    signIn(data: LogInUserInput): AuthPayload!

    createUser(data: CreateUserInput): AuthPayload!
    createPost(data: CreatePostInput): Post!
    createComment(data: CreateCommentInput): Comment!

    deleteUser: User!
    deletePost(id: ID!): Post!
    deleteComment(id: ID!): Comment!

    updateUser(data: UpdateUserInput!): User!
    updatePost(id: ID!, data: UpdatePostInput!): Post!
    updateComment(id: ID!, data: UpdateCommentInput): Comment!
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}

input LogInUserInput {
    email: String!
    password: String!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
}

input CreateCommentInput {
    text: String!
    author: ID!
    post: ID!
}

input UpdateUserInput {
    name: String
    email: String
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input UpdateCommentInput {
    text: String
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    posts: [Post!]!
    comments: [Comment!]!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}

type AuthPayload {
    token: String!
    user: User!
}

type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}